{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "DumpStateResponse",
  "description": "Relevant state for the governance module. Returned by the `DumpState` query.",
  "type": "object",
  "required": [
    "active_proposal_module_count",
    "config",
    "pause_info",
    "proposal_modules",
    "total_proposal_module_count",
    "version",
    "voting_module"
  ],
  "properties": {
    "active_proposal_module_count": {
      "description": "The number of active proposal modules.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "config": {
      "description": "The governance contract's config.",
      "allOf": [
        {
          "$ref": "#/definitions/Config"
        }
      ]
    },
    "pause_info": {
      "description": "Whether the contract is currently paused.",
      "allOf": [
        {
          "$ref": "#/definitions/PauseInfoResponse"
        }
      ]
    },
    "proposal_modules": {
      "description": "The governance modules associated with the governance contract.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProposalModule"
      }
    },
    "total_proposal_module_count": {
      "description": "The total number of proposal modules.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "version": {
      "description": "The governance contract's version.",
      "allOf": [
        {
          "$ref": "#/definitions/ContractVersion"
        }
      ]
    },
    "voting_module": {
      "description": "The voting module associated with the governance contract.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Config": {
      "description": "Top level config type for core module.",
      "type": "object",
      "required": [
        "description",
        "main_dao",
        "name",
        "security_dao"
      ],
      "properties": {
        "dao_uri": {
          "description": "The URI for the DAO as defined by the DAOstar standard https://daostar.one/EIP",
          "type": [
            "string",
            "null"
          ]
        },
        "description": {
          "description": "A description of the contract.",
          "type": "string"
        },
        "main_dao": {
          "description": "The address of the main DAO. It's capable of pausing and unpausing subDAO",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "name": {
          "description": "The name of the contract.",
          "type": "string"
        },
        "security_dao": {
          "description": "The address of the DAO guardian. The security DAO is capable only of pausing the subDAO.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      }
    },
    "ContractVersion": {
      "type": "object",
      "required": [
        "contract",
        "version"
      ],
      "properties": {
        "contract": {
          "description": "contract is the crate name of the implementing contract, eg. `crate:cw20-base` we will use other prefixes for other languages, and their standard global namespacing",
          "type": "string"
        },
        "version": {
          "description": "version is any string that this implementation knows. It may be simple counter \"1\", \"2\". or semantic version on release tags \"v0.7.0\", or some custom feature flag list. the only code that needs to understand the version parsing is code that knows how to migrate from the given contract (and is tied to it's implementation somehow)",
          "type": "string"
        }
      }
    },
    "PauseInfoResponse": {
      "description": "Information about if the contract is currently paused.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Paused"
          ],
          "properties": {
            "Paused": {
              "type": "object",
              "required": [
                "until_height"
              ],
              "properties": {
                "until_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Unpaused"
          ],
          "properties": {
            "Unpaused": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ProposalModule": {
      "description": "Top level type describing a proposal module.",
      "type": "object",
      "required": [
        "address",
        "prefix",
        "status"
      ],
      "properties": {
        "address": {
          "description": "The address of the proposal module.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "prefix": {
          "description": "The URL prefix of this proposal module as derived from the module ID. Prefixes are mapped to letters, e.g. 0 is 'A', and 26 is 'AA'.",
          "type": "string"
        },
        "status": {
          "description": "The status of the proposal module, e.g. 'Active' or 'Disabled.'",
          "allOf": [
            {
              "$ref": "#/definitions/ProposalModuleStatus"
            }
          ]
        }
      }
    },
    "ProposalModuleStatus": {
      "description": "The status of a proposal module.",
      "type": "string",
      "enum": [
        "Enabled",
        "Disabled"
      ]
    }
  }
}
